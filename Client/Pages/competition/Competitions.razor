@page "/competitions"
@attribute [Authorize]

@using BlazorWeb.Interfaces;
@using BlazorWeb.Models.DataTransferModels;
@using BlazorWeb.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@inject ICompetitionService CompetitionService

<PageTitle>Competition page</PageTitle>

<div class="row d-flex align-items-center">

	<div class="col-8 text-center">
		<h1>Competitions</h1>
	</div>

	<div class="col-4 text-end">

		<button class="btn btn-secondary" @onclick="Toggle">
			<span class="oi oi-grid-three-up"></span>
			<span>&nbsp;@ToggleCaption</span>
		</button>

		<button class="btn btn-success" @onclick="fetchData">
			<span class="oi oi-loop-circular" aria-hidden="true"></span>
			<span>&nbsp;Refresh List</span>
		</button>

		<a class="btn btn-primary"
		   href="/competitions/add"
		   role="button">
			<span class="oi oi-plus" aria-hidden="true"></span>
			<span>&nbsp;Add competiton</span>
		</a>
	</div>

</div>



@if (!dataFetched)
{
	<div class="text-center">
		<img src="./images/loading-waiting.gif" />
	</div>
}
else
{
	if (competitions.Count == 0)
	{
		<div class="text-center">
			<h4>
				Sorry, the list is empty
			</h4>
			<img src="./images/empty.gif" />
		</div>
	}
	else
	{
		if (_isTable)
		{
			<div class="table-responsive">
				<table class="table table-striped text-center table-hover">
					<thead class="table-light">
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Date of competition</th>
							<th>Start Time</th>
							<th>End Time</th>
							<th>Duration</th>
							<th>Concurrent Tasks</th>
							<th>Twitter Hashtag</th>
							<th>State</th>
						</tr>
					</thead>
					<tbody>
						@if (competitions.Count == 0)
						{
							<tr>
								<td colspan="9">
									<div class="text-center">
										Sorry, the list is empty
									</div>
								</td>
							</tr>
							<tr>
								<td colspan="9">
									<div class="text-center">
										<img src="./images/empty.gif" height="200" />
									</div>

								</td>
							</tr>
						}
						else
						{
							@foreach (var comp in competitions)
							{
								<tr>
									<td>@comp.Id</td>
									<td>@comp.Name</td>
									<td>@comp.StartDateTime.ToLongDateString()</td>
									<td>@comp.StartDateTime.ToString("t")</td>
									<td>@comp.EndDateTime.ToString("t")</td>
									<td>@comp.Duration.ToString("%h") hour(s)</td>
									<td>@comp.NumberConcTasks</td>
									<td>
										<a href="https://twitter.com/search?q=@comp.Hashtag&src=trend_click&vertical=trends" target="_blank">
											#@comp.Hashtag
										</a>
									</td>
									<td>@comp.State</td>
								</tr>
							}
						}

					</tbody>
				</table>
			</div>
		}
		else
		{
			<div class="row row-cols-1 row-cols-md-2 g-4">
					@foreach (var comp in competitions)
					{
						<CompetitionCard Competition="@comp" />
					}
				</div>
		}
	}
}


@code {
	//[Parameter]
	//public string Message { get; set; }

	private bool _isTable;
	private string ToggleCaption => _isTable ? "Card view" : "Table view";

	private void Toggle()
	{
		_isTable = !_isTable;
	}

	[Parameter]
	public RenderFragment NullList { get; set; }

	[Parameter]
	public RenderFragment EmptyList { get; set; }

	string messageFromServer = String.Empty;
	bool dataFetched;

	List<CompetitionDT> competitions = new()
	{
		//new()
		//{
		//	Id = 1,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	State = CompetitionStates.Ended.ToString(),
		//	CreateDate = new DateTime(2022, 12, 27, 19, 00, 00),
		//	CreateUserId = 1,
		//	UpdateDate = new DateTime(2022, 12, 28, 19, 00, 00),
		//	UpdateUserId = 1,
		//	Status = EntityStatuses.Active.ToString()
		//}, 
		//new()
		//{
		//	Id = 2,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2023, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2023, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Planned,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 3,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 4,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 5,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 6,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 7,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 8,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 9,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 10,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 11,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 12,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 13,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 14,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 15,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
		//new()
		//{
		//	Id = 16,
		//	Name = "The very new competition",
		//	StartDateTime = new DateTime(2022, 12, 27, 10, 00, 00),
		//	EndDateTime = new DateTime(2022, 12, 27, 19, 00, 00),
		//	Duration = new TimeSpan(9, 0, 0),
		//	NumberConcTasks = 3,
		//	Hashtag = "rock-n-roll",
		//	StateId = (int)CompetitionStates.Ended,
		//	CreateDate = DateTime.Now,
		//	CreateUserId = 1,
		//	UpdateDate = DateTime.Now,
		//	UpdateUserId = 1,
		//	StatusId = (int)EntityStatuses.Active
		//},
	};

	protected override async Task OnInitializedAsync()
	{
		dataFetched = true;
		await fetchData();
	}

	public async Task fetchData()
	{
		competitions = await CompetitionService.GetAllCompetitionsAsync();
		dataFetched = true;
	}
}
@page "/competitions/add"
@attribute [Authorize]

@inject ICompetitionService CompetitionService
@inject NavigationManager navigationManager

<div class="row mb-4">

	<div class="col-1 text-start">
		<a class="btn btn-primary"
		   href="/competitions/"
		   role="button">
			<span class="oi oi-arrow-left" aria-hidden="true"></span>
		</a>
	</div>

	<div class="col-6">
		<h3>Adding new competition:</h3>
	</div>

</div>

<div class="row text-left">

	<EditForm Model="@newCompetition" OnValidSubmit="@sendNewCompetition">
		<div class="row">
			<div class="col-6 offset-1">

				<DataAnnotationsValidator />

				<div class="row mb-4">
					<label for="compName" class="col-sm-3 col-form-label">Name</label>
					<div class="col-sm-9">
						<InputText type="text"
								   class="form-control"
								   id="compName"
								   placeholder="Enter competition name"
								   @bind-Value="newCompetition.Name" />
					</div>
				</div>

				<div class="row mb-4">
					<label for="compStartDate" class="col-sm-3 col-form-label">Start date & time</label>
					<div class="col-sm-9">
						<InputDate class="form-control"
								   id="compStartDate"
								   Type="InputDateType.DateTimeLocal"
								   @bind-Value="newCompetition.StartDateTime"
								   ParsingErrorMessage="Must be a date" />
						<div id="compDate" class="form-text">Enter competition start date</div>
					</div>
				</div>

@*				<div class="row mb-4">
					<label for="compStartTime" class="col-sm-3 col-form-label">Start time</label>
					<div class="col-sm-9">
						<input type="time"
							   class="form-control"
							   id="compStartTime"
							   @bind="newCompStartTime"
							   ParsingErrorMessage="Must be a date" />
						<div id="compTime" class="form-text">Enter competition start time</div>
					</div>
				</div>
*@
				<div class="row mb-4">
					<label for="compEndDate" class="col-sm-3 col-form-label">End date & time</label>
					<div class="col-sm-9">
						<InputDate class="form-control"
								   id="compEndDate"
								   Type="InputDateType.DateTimeLocal"
								   @bind-Value="newCompetition.EndDateTime"
								   ParsingErrorMessage="Must be a date" />
						<div id="compEndDate" class="form-text">Enter competition end date</div>
					</div>
				</div>

@*				<div class="row mb-4">
					<label for="compEndTime" class="col-sm-3 col-form-label">End time</label>
					<div class="col-sm-9">
						<input type="time"
							   class="form-control"
							   id="compDate"
							   @bind="newCompEndTime" />
						<div id="compEndTime" class="form-text">Enter competition start time</div>
					</div>
				</div>
*@
				<div class="row mb-4">
					<label for="customRange3" class="col-sm-3 col-form-label">Concurrent tasks</label>
					<div class="col-sm-9">
						<InputSelect class="form-select"
									 aria-label="Default select example"
									 @bind-Value="newCompetition.NumberConcTasks">
							<option selected>Choose from 1 to 5</option>
							<option value="1">1</option>
							<option value="2">2</option>
							<option value="3">3</option>
							<option value="4">4</option>
							<option value="5">5</option>
						</InputSelect>
						<div id="emailHelp" class="form-text">Choose amount of concurrent tasks</div>
					</div>
				</div>

				<div class="row mb-4">
					<label for="inputHashtag" class="col-sm-3 col-form-label">Hashtag</label>
					<div class="col-sm-9">
						<div class="input-group">
							<span class="input-group-text">#</span>
							<InputText type="text"
									   class="form-control"
									   id="inputHashtag"
									   placeholder="hashtag"
									   @bind-Value="newCompetition.Hashtag" />

						</div>
						<div id="HashtagHelp" class="form-text">Enter the competition hashtag for Twitter</div>
					</div>
				</div>

				<div class="row mb-4">
					<label for="operator" class="col-sm-3 col-form-label">Operator for event</label>
					<div class="col-sm-9">
						<InputSelect class="form-select"
									 aria-label="Default select example"
									 DisplayName="operator"
									 @bind-Value="OperatorToCompId">
							@if(users.Count == 0)
							{
								<option value="" selected>Sorry, noone is available</option>
							}
							else
							{
								<option value="" selected>Choose available operator</option>
								foreach (var user in users)
								{
									<option value="@user.Id">@user.FirstName @user.LastName</option>
								}	
							}
									<option value="3">Test User #3</option>
							
						</InputSelect>
						<div id="emailHelp" class="form-text">Choose amount of concurrent tasks</div>
					</div>
				</div>

				<div class="row mb-4">
					<div class="col-sm-6 offset-3">
						<button type="submit" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addingCompetition">Add competition</button>
						<button type="reset" class="btn btn-danger">Clear fields</button>
					</div>
				</div>

			</div>

			<div class="col-4">
				<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
			</div>

		</div>

	</EditForm>
</div>


<!-- Modal -->
<div class="modal fade" id="addingCompetition" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">@modalTitle</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				@if (CompID != 0)
				{
					@modalMessage
				}
				else
				{
					<Loader />
				}
			</div>
			<div class="modal-footer">
				<a class="btn btn-secondary"
				   href="/competitions/"
				   role="button"
				   data-bs-dismiss="modal">
					Back to competitions
				</a>
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal">Add another</button>
				<button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => ButtonSetHandler()">Set this</button>
			</div>
		</div>
	</div>
</div>

<div class="row">
	
	<div class="col-9">
		@if (newCompetition != null)
		{
			<div class="table-responsive">
				<table class="table table-striped table-hover table-sm text-center">
					<thead class="table-light">
						<tr>
							<th>Name</th>
							<th>Start Date</th>
							<th>Start Time</th>
							<th>End Date</th>
							<th>End Time</th>
							<th>Duration</th>
							<th>Tasks</th>
							<th>Event Twitter Hashtag</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>@newCompetition.Name</td>
							<td>@newCompetition.StartDateTime.ToLongDateString()</td>
							<td>@newCompetition.StartDateTime.ToString("t")</td>
							<td>@newCompetition.EndDateTime.ToLongDateString()</td>
							<td>@newCompetition.EndDateTime.ToString("t")</td>
							<td>@newCompetition.Duration.TotalHours hour(s)</td>
							<td>@newCompetition.NumberConcTasks</td>
							<td>@newCompetition.Hashtag</td>
						</tr>
					</tbody>
				</table>
			</div>
		}

	</div>
</div>

@code {

	//DateOnly newCompStartDate;
	//DateOnly newCompEndDate;
	//TimeOnly newCompStartTime;
	//TimeOnly newCompEndTime;
	//double newCompDurationInt;

	//int newCompetitionDurationInt;/* = Convert.ToInt32(newCompetitionDuration.Hours());*/

	CompetitionDT newCompetition = new();
	List<UserDT> users = new();

	int CompID;

	int OperatorToCompId;

	//string messageFromServer = string.Empty;
	bool dataFetched = false;
	string modalMessage = string.Empty;
	string modalTitle = string.Empty;


	//private void ToggleDataFetched()
	//{
	//	dataFetched = !dataFetched;
	//	messageFromServer = string.Empty;
	//}

	protected override async Task OnInitializedAsync()
	{
		var _today = DateOnly.FromDateTime(DateTime.Today);
		var _starttime = new TimeOnly(10, 0, 0);
		var _endtime = new TimeOnly(18, 0, 0);

		//users = await UserService.GetAllActiveUsersAsync();
		newCompetition.Name = "The Very New Competition";

		//newCompetition.StartDateTime = DateTime.Today;
		newCompetition.StartDateTime = _today.ToDateTime(_starttime);
		//newCompetition.EndDateTime = DateTime.Today;
		newCompetition.EndDateTime = _today.ToDateTime(_endtime);
		newCompetition.Duration = newCompetition.EndDateTime - newCompetition.StartDateTime;
		newCompetition.NumberConcTasks = 3;
		newCompetition.Hashtag = "TheCompHashtag";
	}


	public async Task sendNewCompetition()
	{
		AddNewCompetition();

		var returnedComp = await CompetitionService.AddNewCompetitionAsync(newCompetition);
		CompID = (int)returnedComp?.Id;

		//var messageFromServer = await CompetitionService.AddNewOperatorToCompetitionAsync(OperatorToCompId);
		var messageFromServer = await CompetitionService.AddNewOperatorToCompetitionAsync(CompID, OperatorToCompId);

		dataFetched = true;
		ChangeModal(messageFromServer);
		//messageFromServer = string.Empty;

		//TODO change it to result number after adding
		//CompID = 42;
	}

	private void ButtonSetHandler()
	{
		navigationManager
				.NavigateTo($"/competition/set/{CompID}");
	}

	private void ChangeModal(string msg)
	{
		if (msg == "success")
		{
			modalTitle = "Hooray!";
			modalMessage = "Competition added sucesfully. Do you wan to add teams and tasks?";
		}
		else if (msg == "failed")
		{
			modalTitle = "Oops...";
			modalMessage = "Competition adding failed.Please, try again.";
		}
		else
		{
			modalTitle = "Oops...";
			modalMessage = "Something went wrong. We're fixing it.";
		}
	}

	private void AddNewCompetition()
	{
		newCompetition.Duration = newCompetition.EndDateTime - newCompetition.StartDateTime;
		newCompetition.StateId = CompetitionStates.Planned;
		//newCompetition.StartDateTime = newCompStartDate.ToDateTime(newCompStartTime);
		//newCompetition.EndDateTime = newCompEndDate.ToDateTime(newCompEndTime);
	}


}

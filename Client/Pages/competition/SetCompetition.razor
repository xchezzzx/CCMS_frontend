@page "/competition/set/{Id:int}"

@using Blazorise.DataGrid
@using Blazorise.Components
@using Blazorise.Snackbar

@inject ICompetitionService CompetitionService
@inject ITeamService TeamService
@inject IExerciseService ExerciseService
@inject IUserService UserService


<div class="row mb-4">

	<div class="col-1 text-start">
		<a class="btn btn-primary"
		   href="/competitions/"
		   role="button">
			<span class="oi oi-arrow-left" aria-hidden="true"></span>
		</a>
	</div>

	<div class="col-8">
		<h3>Adding teams and tasks for competition #@Id:</h3>
	</div>

</div>

<div class="row">
	<div class="col-9 offset-1">

		<div class="accordion" id="accordionExample">

			<div class="accordion-item">
				<h2 class="accordion-header" id="headingOne">
					<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
						Adding teams
					</button>
				</h2>

				<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						@if (!_teamsFetched)
						{
							<Loader />
						}
						else
						{
							if (fetchedTeams.Count == 0)
							{
								<EmptyList />
							}
							else
							{
								<DataGrid TItem="TeamDT"
								  Data="@fetchedTeams"
								  @bind-SelectedRow="@selectedTeam"
								  @bind-SelectedRows="@selectedTeams"
								  Responsive
								  Filterable
								  SelectionMode="DataGridSelectionMode.Multiple"
								  ShowPager
								  CommandMode="DataGridCommandMode.ButtonRow"
								  Virtualize
								  VirtualizeOptions="@(new() { DataGridHeight = "570px"})">

									@*<DataGridMultiSelectColumn Width="30px"></DataGridMultiSelectColumn>*@

									<DataGridColumns>
										@*										<DataGridColumn Field="@nameof(TeamDT.Id)" Caption="#" Sortable="false" />
								*@										<DataGridColumn Field="@nameof(TeamDT.Name)" Caption="Name" />
										<DataGridColumn Field="@nameof(TeamDT.SumPoints)" Caption="Points" />
									</DataGridColumns>

									<EmptyTemplate>
										<div class="box">
											No teams were found!
										</div>
									</EmptyTemplate>

									<ButtonRowTemplate>
										<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
										<Button Color="Color.Primary" Clicked="@(() => SubmitTeamsAsync())" Disabled="@(selectedTeams != null && selectedTeams.Count == 0 ? true : false)">Submit @(selectedTeams != null && selectedTeams.Count > 0 ? selectedTeams.Count : "") @(selectedTeams != null && selectedTeams.Count == 1 ? "team" : "teams")</Button>
										</ButtonRowTemplate>

									</DataGrid>
							}
						}
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingTwo">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
						Adding tasks
					</button>
				</h2>

				<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						@if (!_exercisesFetched)
						{
							<Loader />
						}
						else
						{
							if (fetchedExercises.Count == 0)
							{
								<EmptyList />
							}
							else
							{
								<DataGrid TItem="ExerciseDT"
								  Data="@fetchedExercises"
								  @bind-SelectedRow="@selectedExercise"
								  @bind-SelectedRows="@selectedExercises"
								  Responsive
								  Filterable
								  SelectionMode="DataGridSelectionMode.Multiple"
								  ShowPager
								  CommandMode="DataGridCommandMode.ButtonRow"
								  Virtualize
								  VirtualizeOptions="@(new() { DataGridHeight = "570px"})">

									<DataGridColumns>
									@*<DataGridColumn Field="@nameof(TeamDT.Id)" Caption="#" Sortable="false" />*@
										<DataGridColumn Field="@nameof(ExerciseDT.Name)" Caption="Name" />
										<DataGridColumn Field="@nameof(ExerciseDT.CategoryId)" Caption="Category" />
										<DataGridColumn Field="@nameof(ExerciseDT.LangId)" Caption="Lang" />
										<DataGridColumn Field="@nameof(ExerciseDT.PlatformId)" Caption="Platform" />
										<DataGridColumn Field="@nameof(ExerciseDT.Points)" Caption="Points" />
										<DataGridColumn Field="@nameof(ExerciseDT.Fine)" Caption="Fine" />
										<DataGridColumn Field="@nameof(ExerciseDT.IfHasBonus)" Caption="Bonus">
											<DisplayTemplate>
												@{
													var bonus = (context as ExerciseDT).IfHasBonus;
													if (bonus)
													{
														@("Yes")
													}
													else
													{
														@("No")
													}
												}
											</DisplayTemplate>
										</DataGridColumn>
									</DataGridColumns>

									<EmptyTemplate>
										<div class="box">
											No teams were found!
										</div>
									</EmptyTemplate>

									<ButtonRowTemplate>
										<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
										<Button Color="Color.Primary" Clicked="@SubmitExcercisesAsync" Disabled="@(selectedExercises != null && selectedExercises.Count == 0 ? true : false)">Submit @(selectedExercises != null && selectedExercises.Count > 0 ? selectedExercises.Count : "") @(selectedExercises != null && selectedExercises.Count == 1 ? "task" : "tasks")</Button>
										</ButtonRowTemplate>

									</DataGrid>
							}
						}
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingThree">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
						Adding operators
					</button>
				</h2>

				<div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						@if (!_usersFetched)
						{
							<Loader />
						}
						else
						{
							if (fetchedUsers.Count == 0)
							{
								<EmptyList />
							}
							else
							{
								<DataGrid TItem="UserDT"
								  Data="@fetchedUsers"
								  @bind-SelectedRow="@selectedUser"
								  @bind-SelectedRows="@selectedUsers"
								  Responsive
								  Filterable
								  SelectionMode="DataGridSelectionMode.Multiple"
								  ShowPager
								  CommandMode="DataGridCommandMode.ButtonRow"
								  Virtualize
								  VirtualizeOptions="@(new() { DataGridHeight = "570px"})">

									<DataGridColumns>
										@*										<DataGridColumn Field="@nameof(UserDT.Id)" Caption="#" Sortable="false" />
								*@		<DataGridColumn Field="@nameof(UserDT.FirstName)" Caption="First name" />
										<DataGridColumn Field="@nameof(UserDT.LastName)" Caption="Last name" />
										<DataGridColumn Field="@nameof(UserDT.Email)" Caption="E-mail" />
									@*<DataGridColumn Field="@nameof(UserDT.PointsSummary)" Caption="Has points" />
								*@		<DataGridColumn Field="@nameof(UserDT.Role)" Caption="Role" />


									</DataGridColumns>

									<EmptyTemplate>
										<div class="box">
											No users were found!
										</div>
									</EmptyTemplate>

									<ButtonRowTemplate>
										<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
										<Button Color="Color.Primary" Clicked="context.NewCommand.Clicked" Disabled="@(selectedUsers != null && selectedUsers.Count == 0 ? true : false)">Submit @(selectedUsers != null && selectedUsers.Count > 0 ? selectedUsers.Count : "") @(selectedUsers != null && selectedUsers.Count == 1 ? "user" : "users")</Button>
									</ButtonRowTemplate>

								</DataGrid>
							}
						}

					</div>
				</div>

			</div>
		</div>

	</div>
</div>

<Snackbar @ref="snackbarTeams" Color="SnackbarColor.Success">
	<SnackbarBody>
		@snackMessage
@*		<SnackbarAction Clicked="@(() => snackbarTeams.Hide())">HIDE</SnackbarAction>
*@	</SnackbarBody>
</Snackbar>

@code {

	[Parameter]
	public int Id { get; set; }

	CompetitionDT currentCompetition = new();

	private TeamDT selectedTeam;
	List<TeamDT> fetchedTeams = new();
	List<TeamDT> selectedTeams = new();

	private ExerciseDT selectedExercise;
	List<ExerciseDT> fetchedExercises = new();
	List<ExerciseDT> selectedExercises = new();

	private UserDT selectedUser;
	List<UserDT> fetchedUsers = new();
	List<UserDT> selectedUsers = new();

	bool _teamsFetched;
	bool _exercisesFetched;
	bool _usersFetched;
	bool _compFetched;

	string snackMessage = string.Empty;

	Snackbar snackbarTeams;

	protected override async Task OnInitializedAsync()
	{
		_teamsFetched = false;
		_exercisesFetched = false;
		_usersFetched = false;
		await FetchTeamsAsync();
		await FetchExercisesAsync();
		await FetchUsersAsync();
		await FetchCurrentCompetitionAsync();
	}

	private async Task FetchCurrentCompetitionAsync()
	{
		_compFetched = false;
		Console.WriteLine("comp begin");
		try
		{
			currentCompetition = await CompetitionService.GetCompetitionByIdAsync(Id);
			_compFetched = true;

		}
		catch
		{
			Console.WriteLine("comp failed");
			_compFetched = false;
		}

		Console.WriteLine("comp end");
		Console.WriteLine(_compFetched);

	}

	private async Task FetchTeamsAsync()
	{
		_teamsFetched = false;
		Console.WriteLine("teams begin");
		try
		{
			fetchedTeams = await TeamService.GetAllTeamsAsync();
			_teamsFetched = true;
		}
		catch (DBNullResponseException)
		{
			_teamsFetched = false;
		}

		Console.WriteLine("teams end");
		Console.WriteLine(_teamsFetched);
	}

	private async Task FetchExercisesAsync()
	{
		_exercisesFetched = false;
		Console.WriteLine("tasks begin");
		try
		{
			fetchedExercises = await ExerciseService.GetAllExercisesAsync();
			_exercisesFetched = true;
		}
		catch (DBNullResponseException)
		{
			_exercisesFetched = false;
		}
		Console.WriteLine("tasks end");
		Console.WriteLine(_exercisesFetched);

	}

	private async Task FetchUsersAsync()
	{
		_usersFetched = false;
		Console.WriteLine("users begin");
		try
		{
			fetchedUsers = await UserService.GetAllActiveUsersAsync();
			_usersFetched = true;
		}
		catch (DBNullResponseException)
		{
			_usersFetched = true;
		}
		Console.WriteLine("users end");
		Console.WriteLine(_usersFetched);
	}

	private async Task SubmitTeamsAsync()
	{
		var teamsIds = selectedTeams.Select(x => x.Id).ToList();
		var submitTeamsMsg = "success";
		try
		{
			
			await CompetitionService.AddNewTeamsToCompetitionAsync(Id, teamsIds);
		}
		catch 
		{
			submitTeamsMsg = "failed";
		}
		Console.WriteLine("teams sent");
		ShowPopup(submitTeamsMsg);
	}

	private async Task SubmitExcercisesAsync()
	{
		var exIds = selectedExercises.Select(x => x.Id).ToList();
		var submitExcercisesMsg = "success";
		try
		{

			await CompetitionService.AddNewExercisesToCompetitionAsync(Id, exIds);
		}
		catch
		{
			submitExcercisesMsg = "failed";
		}

		Console.WriteLine("exs sent");
	}

	private async Task SubmitOperatorsAsync()
	{
		var operIds = selectedUsers.Select(x => x.Id).ToList();
		var submitOperatorsMsg = "success";
		try
		{
			await CompetitionService.AddNewOperatorsToCompetitionAsync(Id, operIds);
		}
		catch
		{
			submitOperatorsMsg = "failed";
		}

		Console.WriteLine("opers sent");
	}

	private void ShowPopup(string msg)
	{
		snackMessage = msg;
		snackbarTeams.Show();
	}
}

@page "/competition/set/{Id:int}"

@inject ICompetitionService CompetitionService
@inject ITeamService TeamService

<div class="row mb-4">

	<div class="col-1 text-start">
		<a class="btn btn-primary"
		   href="/competitions/"
		   role="button">
			<span class="oi oi-arrow-left" aria-hidden="true"></span>
		</a>
	</div>

	<div class="col-6">
		<h3>Adding teams and tasks for competition #@Id:</h3>
	</div>

</div>

<div class="row">
	<div class="col-8 offset-1">

		<div class="accordion" id="accordionExample">

			<div class="accordion-item">
				<h2 class="accordion-header" id="headingOne">
					<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
						Adding teams
					</button>
				</h2>

				<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						@if (!_teamsFetched)
						{
							<Loader />
						}
						else
						{
							if (teams.Count == 0)
							{
								<EmptyList />
							}
							else
							{
								<div class="row">
									<div class="col-6 offset-1">
										<div class="row mb-4">
											<label for="compTeams" class="col-sm-3 col-form-label">Teams</label>
											<div class="col-sm-9">
												<select class="form-select"
												@bind="chosenTeam">
													<option value="" selected>Choose teams</option>
													@foreach (var team in teams)
													{
														<option value="@team.Id">@team.Name</option>
													}
												</select>

												<div id="passHelp" class="form-text">Choose teams for event</div>

											</div>
										</div>

									</div>
								</div>
							}
						}
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingTwo">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
						Adding Tasks
					</button>
				</h2>

				<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingThree">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
						Accordion Item #3
					</button>
				</h2>

				<div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
					</div>
				</div>

			</div>
		</div>


	</div>
</div>











@code {

	[Parameter]
	public int Id { get; set; }

	CompetitionDT currentComp = new();

	List<TeamDT> teams = new();
	bool _teamsFetched;

	int chosenTeam;


	protected override async Task OnInitializedAsync()
	{
		_teamsFetched = false;

		await FetchTeams();
		//currentComp = await CompetitionService.GetCompetitionByIdAsync(Id);
	}

	private async Task FetchTeams()
	{
		_teamsFetched = false;
		Console.WriteLine("begin");
		teams = await TeamService.GetAllTeamsAsync();
		foreach(var t in teams)
		{
			Console.WriteLine(t.Id + "-" + t.Name);
		};
		Console.WriteLine("end");
		_teamsFetched = true;
	}
}

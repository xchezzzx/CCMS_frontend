@page "/competition/set/{Id:int}"

@using Blazorise.DataGrid

@inject ICompetitionService CompetitionService
@inject ITeamService TeamService

<div class="row mb-4">

	<div class="col-1 text-start">
		<a class="btn btn-primary"
		   href="/competitions/"
		   role="button">
			<span class="oi oi-arrow-left" aria-hidden="true"></span>
		</a>
	</div>

	<div class="col-6">
		<h3>Adding teams and tasks for competition #@Id:</h3>
	</div>

</div>

<div class="row">
	<div class="col-8 offset-1">

		<div class="accordion" id="accordionExample">

			<div class="accordion-item">
				<h2 class="accordion-header" id="headingOne">
					<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
						Adding teams
					</button>
				</h2>

				<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						@if (!_teamsFetched)
						{
							<Loader />
						}
						else
						{
							if (teamsList.Count == 0)
							{
								<EmptyList />
							}
							else
							{
								<div class="row">
									<div class="col-6 offset-1">

										<label for="compTeams" class="col-sm-3 col-form-label">Choose teams for event</label>
										<div class="col-sm-9">
											<select class="form-select"
											multiple
											size="20"
											aria-label="multiple select"
											bind="@selectedTeams">
												<option value="" selected>Choose teams</option>
												@foreach (var team in teamsList)
												{
													<option value="@team)">@team.Name</option>
												}
											</select>

											<div id="passHelp" class="form-text">Press and hold CTRL key to select several teams</div>
										</div>

										<div class="table-responsive">
											<table class="table table-striped text-center table-hover">
												<thead class="table-light">
													<tr>
														<th>!</th>
														<th>ID</th>
														<th>Name</th>
														<th>Points</th>
													</tr>
												</thead>
												<tbody>

													@foreach (var t in teamsList)
													{
														<tr>
															<td>
																<InputCheckbox class="form-check-input"
																   @bind-Value:onchange="selectedTeams">
																</InputCheckbox>
															</td>
															<td>@t.Id</td>
															<td>@t.Name</td>
															<td>@t.SumPoints</td>
														</tr>
													}


												</tbody>
											</table>


										</div>
									</div>

									<div class="col-4 offset-1">
										<button class="btn btn-primary">
											Add teams
										</button>
									</div>

								</div>


								<DataGrid TItem="TeamDT"
								  Data="@teamsList"
								  @bind-SelectedRow="@selectedTeam"
								  @bind-SelectedRows="@selectedTeams"
								  PageSize="11"
								  Responsive
								  SelectionMode="DataGridSelectionMode.Multiple"
								  ShowPager
								  CommandMode="DataGridCommandMode.ButtonRow">

									@*									<DataGridMultiSelectColumn Width="30px"></DataGridMultiSelectColumn>*@

									<DataGridColumns>
										<DataGridColumn Field="@nameof(TeamDT.Id)" Caption="#" Sortable="false" />
										<DataGridColumn Field="@nameof(TeamDT.Name)" Caption="Name" Editable />
										<DataGridColumn Field="@nameof(TeamDT.SumPoints)" Caption="Points" Editable />
									</DataGridColumns>

									<EmptyTemplate>
										<div class="box">
											No teams were found!
										</div>
									</EmptyTemplate>

									<ButtonRowTemplate>
										<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
										<Button Color="Color.Primary" Clicked="context.NewCommand.Clicked">Submit</Button>
									</ButtonRowTemplate>

								</DataGrid>
							}
						}
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingTwo">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
						Adding Tasks
					</button>
				</h2>

				<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
					</div>
				</div>

			</div>
			<div class="accordion-item">

				<h2 class="accordion-header" id="headingThree">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
						Accordion Item #3
					</button>
				</h2>

				<div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
					</div>
				</div>

			</div>
		</div>


	</div>
</div>

@code {

	[Parameter]
	public int Id { get; set; }

	CompetitionDT currentComp = new();
	private TeamDT selectedTeam;

	List<TeamDT> teamsList = new();
	List<ExerciseDT> tasks = new();

	List<TeamDT> selectedTeams = new List<TeamDT>();


	bool _teamsFetched;
	bool _tasksFetched;


	protected override async Task OnInitializedAsync()
	{
		_teamsFetched = false;
		await FetchTeams();
		currentComp = await CompetitionService.GetCompetitionByIdAsync(Id);
	}

	private async Task FetchTeams()
	{
		_teamsFetched = false;
		Console.WriteLine("begin");
		try
		{
			teamsList = await TeamService.GetAllTeamsAsync();
			_teamsFetched = true;
		}
		catch (DBNullResponseException)
		{
			_teamsFetched = false;
		}

		foreach (var t in teamsList)
		{
			Console.WriteLine(t.Id + " - " + t.Name);
		};
		Console.WriteLine("end");
		Console.WriteLine(_teamsFetched);
	}
}

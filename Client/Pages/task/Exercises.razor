@page "/tasks"
@attribute [Authorize]

@inject IExerciseService ExerciseService

<PageTitle>Task page</PageTitle>

<div class="row">

	<div class="col-8 text-center">
		<h1>Tasks</h1>
	</div>

	<div class="col-4">
		<div class="d-grid gap-2 d-md-flex justify-content-md-end">
			<button class="btn btn-secondary" @onclick="Toggle">
				<span class="oi oi-grid-three-up"></span>
				<span>&nbsp;@ToggleCaption</span>
			</button>

			<button class="btn btn-success" @onclick="async c => {await fetchData();}">
				<span class="oi oi-loop-circular" aria-hidden="true"></span>
				<span>&nbsp;Refresh</span>
			</button>

			<a class="btn btn-primary"
			   href="/tasks/add"
			   role="button">
				<span class="oi oi-plus" aria-hidden="true"></span>
				<span>&nbsp;Add task</span>
			</a>
		</div>
	</div>

</div>

@if (!_dataFetched)
{
	<Loader Size="large" />
}
else
{
	@if (exercises.Count == 0)
	{
		<EmptyList />
	}
	else
	{
		if (_isTable)
		{
			<div class="table-responsive">
				<table class="table table-striped text-center table-hover">
					<thead class="table-light">
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Content</th>
							<th>Category</th>
							<th>Language</th>
							<th>Platform</th>
							<th>Timeframe</th>
							<th>Points</th>
							<th>Fine</th>
							<th>Has bonus</th>
							<th>Bonus content</th>
							<th>Bonus time</th>
							<th>Bonus points</th>
							<th>Created at</th>
							<th>Created by</th>
							<th>Updated at</th>
							<th>Updated by</th>
							<th>Status</th>
						</tr>
					</thead>

					<tbody>

						@foreach (var task in exercises)
						{
							<tr>
								<td>@task.Id</td>
								<td>
									<a href="tasks/@task.Id">
										@task.Name
									</a>
								</td>
								<td>@task.Content</td>
								<td>@task.CategoryId</td>
								<td>@task.LangId</td>
								<td>@task.PlatformId</td>
								<td>@task.Timeframe</td>
								<td>@task.Points</td>
								<td>@task.Fine</td>
								<td>@task.IfHasBonus.ToString()</td>
								<td>@task.BonusContent</td>
								<td>@task.BonusTimeframe</td>
								<td>@task.BonusPoints</td>
								<td>@task.CreateDate.ToString("G")</td>
								<td>@task.CreateUserId</td>
								<td>@task.UpdateDate.ToString("G")</td>
								<td>@task.UpdateUserId</td>
								<td>@((EntityStatuses)task.StatusId)</td>
							</tr>
						}

					</tbody>
				</table>
			</div>
		}
		else
		{
			<div class="row row-cols-1 row-cols-md-3 g-4">
				@foreach (var task in exercises)
				{
					<div class="col">
						<div class="card text-start">

							<div class="card-header">
								<ul class="nav nav-tabs card-header-tabs" id="myTab">
									<li class="nav-item">
										<a href="#task(@task.Id)" class="nav-link active" data-bs-toggle="tab">
											<span class="oi oi-clipboard" aria-hidden="true"></span> Task
										</a>
									</li>

									<li class="nav-item">
										<a href="#bonus(@task.Id)" class="nav-link" data-bs-toggle="tab">
											<span class="oi oi-puzzle-piece" aria-hidden="true"></span> Bonus
										</a>
									</li>

									<li class="nav-item">
										<a href="#hints(@task.Id)" class="nav-link" data-bs-toggle="tab">
											<span class="oi oi-lightbulb" aria-hidden="true"></span> Hints
										</a>
									</li>

									<li class="nav-item">
										<a href="#info(@task.Id)" class="nav-link" data-bs-toggle="tab">
											<span class="oi oi-wrench" aria-hidden="true"></span> Info
										</a>
									</li>
								</ul>
							</div>

							<div class="card-body">
								<div class="tab-content">

									<div class="tab-pane fade show active" id="task(@task.Id)">
										<h5 class="card-title">#@task.Id @task.Name</h5>
										<p>
											Points: @task.Points
											<br />
											Time: @task.Timeframe.TotalHours hour(s)
											<br />
											Fine if dropped: @task.Fine
										</p>
										<p class="card-text">@task.Content</p>

									</div>

									<div class="tab-pane fade" id="bonus(@task.Id)">
										<h5 class="card-title">Bonus task</h5>
										<p class="card-text">
											Bonus task: @task.BonusContent
											<br />
											Bonus time: @task.BonusTimeframe?.TotalHours hour(s)
											<br />
											Bonus points: @task.BonusPoints
										</p>
									</div>

									<div class="tab-pane fade" id="hints(@task.Id)">
										<h5 class="card-title">Messages tab content</h5>
										<p class="card-text">Here is some example text to make up the tab's content. Replace it with your own text anytime.</p>
									</div>

									<div class="tab-pane fade" id="info(@task.Id)">
										<h5 class="card-title">Messages tab content</h5>
										<p class="card-text">
											Created at @task.CreateDate.ToString("G")
											<br />
											Created by @task.CreateUserId
											<br />
											Updated at @task.UpdateDate
											<br />
											Updated by @task.UpdateUserId
											<br />
											Status: @((EntityStatuses)task.StatusId)
										</p>
									</div>
								</div>
							</div>

							<div class="card-footer">
								<small class="text-muted">Last updated 3 mins ago</small>
							</div>

						</div>
					</div>
				}
			</div>
		}
	}
}


@code {

	private bool _dataFetched;
	private bool _isTable;
	private string ToggleCaption => _isTable ? "Card view" : "Table view";

	List<ExerciseDT> exercises = new();

	private void Toggle()
	{
		_isTable = !_isTable;
	}

	

	protected override async Task OnInitializedAsync()
	{
		_isTable = false;

		_dataFetched = false;
		await fetchData();
	}

	public async Task fetchData()
	{
		//Console.WriteLine("Fetching data...");
		_dataFetched = false;
		Console.WriteLine("false");
		exercises = await ExerciseService.GetAllExercisesAsync();

		Console.WriteLine("true");
		_dataFetched = true;
	}

}
@using SharedLib.Constants;
@inject ICompetitionService CompetitionService

@attribute [Authorize(Roles = ("[\"Administrator\"], [\"Operator\"]"))]

<div class="col" hidden="@HideCard">
	<div class="card text-start h-100">

		<div class="card-header">
			<ul class="nav nav-tabs card-header-tabs" id="myTab">

				<li class="nav-item">
					<a href="" class="nav-link @ColorByState disabled" data-bs-toggle="tab">
						<span class="oi oi-bookmark" aria-hidden="true"></span>
					</a>
				</li>

				<li class="nav-item">
					<a href="#event(@Competition.Id)" class="nav-link active" data-bs-toggle="tab">
						<span class="oi oi-aperture" aria-hidden="true"></span> About
					</a>
				</li>

				<li class="nav-item">
					<a href="#teams(@Competition.Id)" class="nav-link" data-bs-toggle="tab" @onclick="ShowTeams">
						<span class="oi oi-people" aria-hidden="true"></span> Teams
					</a>
				</li>

				<AuthorizeView Roles="@AuthorizationRoles.Administrator">
					<Authorized>
						<li class="nav-item">
							<a href="#info(@Competition.Id)" class="nav-link" data-bs-toggle="tab">
								<span class="oi oi-wrench" aria-hidden="true"></span> Info
							</a>
						</li>
					</Authorized>
				</AuthorizeView>

			</ul>
		</div>

		<div class="card-body">
			<div class="tab-content">

				<div class="tab-pane fade show active" id="event(@Competition.Id)">

					<div class="row">

						<div class="col-4">
							<img src="./images/HackathonLogoDef.jpg" width="200" />
						</div>

						<div class="col-8">

							<div class="row">
								<div class="col m-0 p-0">
									<h4 class="card-title font-large"><u>@Competition.Name</u></h4>
								</div>
							</div>

							<div class="row">
								<div class="col-6 m-0 p-0">
									<p>
										Date: @Competition.StartDateTime.ToString("dd.MM.yyy")
										<br />
										Day of week: @Competition.StartDateTime.DayOfWeek
										<br />
										Start at: @Competition.StartDateTime.ToString("t")
										<br />
										End at: @Competition.EndDateTime.ToString("t")
										<br />
										State: @Competition.State
									</p>
								</div>

								<div class="col-6 m-0 p-0">
									Duration: @Competition.Duration.Hours hours @if (Competition.Duration.Minutes != 0)
									{
										@Competition.Duration.Minutes <span>minutes</span>
									}

									<br />
									Hashtag: <a href="https://twitter.com/search?q=@Competition.Hashtag&src=trend_click&vertical=trends" target="_blank">#@Competition.Hashtag</a>
									<br />
								</div>

							</div>
						</div>
					</div>


				</div>

				<div class="tab-pane fade" id="teams(@Competition.Id)">
					<h5 class="card-title">Teams</h5>
					<p class="card-text">
						@if (TeamsFetched)
						{
							<ul>
								@foreach (var team in TeamsInComp)
								{
									<li>@team.Name</li>
								}
							</ul>
						}
						else
						{
							<p>Sorry, there were any teams...</p>
						}
					</p>
				</div>

				<AuthorizeView Roles="@AuthorizationRoles.Administrator">
					<Authorized>
						<div class="tab-pane fade" id="info(@Competition.Id)">

							<div class="row">
								<h5 class="card-title">Service info</h5>
							</div>

							<div class="row card-text">

								<div class="col-6">
									ID: @Competition.Id.
									<br />
									Status: @Competition.Status
								</div>

								<div class="col-6">
									Created at @Competition.CreateDate.ToString("R")
									<br />
									Created by @Competition.CreateUserId
									<br />
									Updated at @Competition.UpdateDate.ToString("R")
									<br />
									Updated by @Competition.UpdateUserId
								</div>

							</div>
						</div>
					</Authorized>
				</AuthorizeView>

			</div>
		</div>

		<div class="card-footer">
			<div class="row">

				<div class="col-5 mb-1 align-self-end">
					<small class="text-muted">@LastUpdated()</small>
				</div>

				<div class="col-1 mb-0 text-end">
					<button class="btn btn-outline-secondary" @onclick="Expand">
						<span class="oi oi-chevron-bottom"></span>
					</button>
				</div>

				<div class="col-6 text-end mb-1">

					<button class="btn btn-success"
							disabled=@(IfStartBtnDisabled())
							@onclick="Start">
						<span class="oi oi-media-play"></span>
						<span>&nbsp;Start</span>
					</button>

					<button class="btn btn-secondary" @onclick="Duplicate">
						<span class="oi oi-copywriting"></span>
						<span>&nbsp;Duplicate</span>
					</button>
					<AuthorizeView Roles="@AuthorizationRoles.Administrator">
						<Authorized>
							<button class="btn btn-danger" @onclick="Delete">
								<span class="oi oi-x"></span>
								<span>&nbsp;Delete</span>
							</button>
						</Authorized>
					</AuthorizeView>

					<AuthorizeView Roles="@AuthorizationRoles.Operator">
						<Authorized>
							<button class="btn btn-danger" @onclick="Disable">
								<span class="oi oi-x"></span>
								<span>&nbsp;Disable</span>
							</button>
						</Authorized>
					</AuthorizeView>

				</div>

			</div>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public CompetitionDT Competition { get; set; }

	List<TeamDT> TeamsInComp = new();
	bool TeamsFetched;

	private TimeSpan _updated;

	private string ColorByState = "text-bg-primary";

	bool HideCard;

	protected override async Task OnInitializedAsync()
	{
		HideCard = false;
		ColorByState = "text-bg-primary";
		ChangeCardColorByState();
		//Console.WriteLine(Competition.Id);

	}

	protected override void OnParametersSet()
	{
		LastUpdated();
	}


	private void ChangeCardColorByState()
	{
		switch (Competition.StateId)
		{
			case CompetitionStates.InProgress:
			ColorByState = "text-bg-success";
			break;

			case CompetitionStates.Canceled:
			ColorByState = "text-bg-warning";
			break;

			case CompetitionStates.Ended:
			ColorByState = "text-bg-light";
			break;

			case CompetitionStates.Planned:
			ColorByState = "text-bg-primary";
			break;

			case CompetitionStates.Dropped:
			ColorByState = "text-bg-dark";
			break;
		}
	}

	private string LastUpdated()
	{
		TimeSpan updated = DateTime.Now - Competition.UpdateDate;
		string timeFromUpdate = "Last updated";

		if (updated.Days == 0 && updated.Hours == 0 && updated.Minutes <= 5)
			timeFromUpdate += $" just now";
		else
		{
			if (updated.Days != 0)
			{
				if (updated.Days == 1)
					timeFromUpdate += $" 1 day";
				else timeFromUpdate += $" {updated.Days} days";
			}

			if (updated.Hours != 0)
			{
				if (updated.Hours == 1)
					timeFromUpdate += $" 1 hour";
				else timeFromUpdate += $" {updated.Hours} hours";
			}

			if (updated.Minutes != 0)
			{
				if (updated.Minutes == 1)
					timeFromUpdate += $" 1 minute";
				else timeFromUpdate += $" {updated.Minutes} minutes";
			}

			timeFromUpdate += " ago";
		}

		return timeFromUpdate;
	}

	private async void ShowTeams()
	{
		try
		{
			var task = CompetitionService.GetAllCompetitionTeamsAsync((int)Competition?.Id);
			TeamsInComp = await task;
			TeamsFetched = true;
		}
		catch
		{
			TeamsFetched = false;
		}

	}

	private void Duplicate()
	{
		ChangeCardColorByState();

		Console.WriteLine("Duplicated");
	}

	private void Start()
	{
		Console.WriteLine("Started");
	}

	private void Delete()
	{
		var msg = CompetitionService.DeleteCompetitionByIdAsync((int)Competition?.Id);
		HideCard = true;
		Console.WriteLine("Deletion: ", msg);
	}

	private void Disable()
	{
		Console.WriteLine("Disabled");
	}

	private void Expand()
	{
		Console.WriteLine("Expanded");
	}

	private bool IfStartBtnDisabled()
	{
		bool state = true;
		switch (Competition.StateId)
		{
			case CompetitionStates.Ended:
			case CompetitionStates.Dropped:
			case CompetitionStates.Canceled:
			state = true;
			break;
			case CompetitionStates.Planned:
			state = false;
			break;
		}
		return state;
	}
}

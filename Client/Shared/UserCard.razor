@inject IUserService UserService

@attribute [Authorize(Roles = ("[\"Administrator\"], [\"Operator\"]"))]

<div class="col" hidden="@HideCard">
	<div class="card text-start h-100">

		<div class="card-header">
			<ul class="nav nav-tabs card-header-tabs" id="myTab">

				<li class="nav-item">
					<a href="#event(@User.Id)" class="nav-link active" data-bs-toggle="tab">
						<span class="oi oi-aperture" aria-hidden="true"></span> About
					</a>
				</li>

				<li class="nav-item">
					<a href="#teams(@User.Id)" class="nav-link" data-bs-toggle="tab" @onclick="ShowTeams">
						<span class="oi oi-people" aria-hidden="true"></span> Teams
					</a>
				</li>

				<AuthorizeView Roles=@admin>
					<Authorized>
						<li class="nav-item">
							<a href="#info(@User.Id)" class="nav-link" data-bs-toggle="tab">
								<span class="oi oi-wrench" aria-hidden="true"></span> Info
							</a>
						</li>
					</Authorized>
				</AuthorizeView>

			</ul>
		</div>

		<div class="card-body">
			<div class="tab-content">

				<div class="tab-pane fade show active" id="event(@User.Id)">

					<div class="row">

						<div class="col-4">
							<img src="./images/userpic.jpg" width="200" />
						</div>

						<div class="col-8">

							<div class="row">
								<div class="col m-0 p-0">
									<h4 class="card-title font-large"><u>@User.FirstName @User.LastName</u></h4>
								</div>
							</div>

							<div class="row">
								<div class="col-6 m-0 p-0">
									<p>
										E-mail: @User.Email
										<br />
										Role: @User.Role
										<br />
										Points: @User.PointsSummary
									</p>
								</div>
							</div>

						</div>
					</div>
				</div>

				<div class="tab-pane fade" id="teams(@User.Id)">
					<h5 class="card-title">Teams</h5>
					<p class="card-text">
						@if (_teamsFetched)
						{
							<ul>
								@foreach (var team in TeamsWithUser)
								{
									<li>@team.Id</li>
								}
							</ul>
						}
						else
						{
						<p>Sorry, there were any teams...</p>
						}
					</p>
				</div>

				<AuthorizeView Roles=@admin>
					<Authorized>
						<div class="tab-pane fade" id="info(@User.Id)">

							<div class="row">
								<h5 class="card-title">Service info</h5>
							</div>

							<div class="row card-text">

								<div class="col-6">
									ID: @User.Id.
									<br />
									Status: @User.Status
								</div>

								<div class="col-6">
									Created at @User.CreateDate.ToString("R")
									<br />
									Created by @User.CreateUserId
									<br />
									Updated at @User.UpdateDate.ToString("R")
									<br />
									Updated by @User.UpdateUserId
								</div>

							</div>
						</div>
					</Authorized>
				</AuthorizeView>

			</div>
		</div>

		<div class="card-footer">
			<div class="row">

				<div class="col-5 mb-1 align-self-end">
					<small class="text-muted">@LastUpdated()</small>
				</div>

				<div class="col-1 mb-0 text-end">
					<button class="btn btn-outline-secondary" @onclick="Expand">
						<span class="oi oi-chevron-bottom"></span>
					</button>
				</div>

				<div class="col-6 text-end mb-1">

					<AuthorizeView Roles=@admin>
						<Authorized>
							<button class="btn btn-danger" @onclick="Delete">
								<span class="oi oi-x"></span>
								<span>&nbsp;Delete</span>
							</button>
						</Authorized>
					</AuthorizeView>

					<AuthorizeView Roles=@oper>
						<Authorized>
							<button class="btn btn-danger" @onclick="Disable">
								<span class="oi oi-x"></span>
								<span>&nbsp;Disable</span>
							</button>
						</Authorized>
					</AuthorizeView>

				</div>

			</div>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public UserDT User { get; set; }

	List<TeamDT> TeamsWithUser = new();
	bool _teamsFetched;

	string admin = "[\"Administrator\"]";
	string oper = "[\"Operator\"]";

	private TimeSpan _updated;

	private string ColorByState = "text-bg-primary";

	bool HideCard;

	protected override async Task OnInitializedAsync()
	{
		HideCard = false;
		ColorByState = "text-bg-primary";
		//Console.WriteLine(Competition.Id);
	}

	protected override void OnParametersSet()
	{
		LastUpdated();
	}


	//private void ChangeCardColorByState()
	//{
	//	switch (User.StateId)
	//	{
	//		case CompetitionStates.InProgress:
	//		ColorByState = "text-bg-success";
	//		break;

	//		case CompetitionStates.Canceled:
	//		ColorByState = "text-bg-warning";
	//		break;

	//		case CompetitionStates.Ended:
	//		ColorByState = "text-bg-light";
	//		break;

	//		case CompetitionStates.Planned:
	//		ColorByState = "text-bg-primary";
	//		break;

	//		case CompetitionStates.Dropped:
	//		ColorByState = "text-bg-dark";
	//		break;
	//	}
	//}

	private string LastUpdated()
	{
		TimeSpan updated = DateTime.Now - User.UpdateDate;
		string timeFromUpdate = "Last updated";

		if (updated.Days == 0 && updated.Hours == 0 && updated.Minutes <= 5)
			timeFromUpdate += $" just now";
		else
		{
			if (updated.Days != 0)
			{
				if (updated.Days == 1)
					timeFromUpdate += $" 1 day";
				else timeFromUpdate += $" {updated.Days} days";
			}

			if (updated.Hours != 0)
			{
				if (updated.Hours == 1)
					timeFromUpdate += $" 1 hour";
				else timeFromUpdate += $" {updated.Hours} hours";
			}

			if (updated.Minutes != 0)
			{
				if (updated.Minutes == 1)
					timeFromUpdate += $" 1 minute";
				else timeFromUpdate += $" {updated.Minutes} minutes";
			}

			timeFromUpdate += " ago";
		}

		return timeFromUpdate;
	}

	private async void ShowTeams()
	{
		try
		{
			//var task = CompetitionService.GetAllCompetitionTeamsAsync((int)Competition?.Id);
			//TeamsWithUser = await task;
			_teamsFetched = true;
		}
		catch
		{
			_teamsFetched = false;
		}

	}

	private void Duplicate()
	{
		Console.WriteLine("Duplicated");
	}

	private void Start()
	{
		Console.WriteLine("Started");
	}

	private async Task Delete()
	{
		var msg = await UserService.DeleteUserByIdAsync((int)User?.Id);
		HideCard = true;
		Console.WriteLine("Deletion: ", msg);
	}

	private void Disable()
	{
		Console.WriteLine("Disabled");
	}

	private void Expand()
	{
		Console.WriteLine("Expanded");
	}
}

@inject ICompetitionService CompetitionService
@inject NavigationManager NavigationManager

<div class="col">
	<div class="card text-start">
		<div class="card-header">

			<div class="row">

				<div class="col-6">
					<h4 class="card-header">@Competition.Name</h4>
				</div>

				<div class="col-6 text-end">
					<h4 class="card-header">@TimeString</h4>
				</div>

			</div>
		</div>

		<div class="card-body">

			<div class="row">

				@*TEAMS BLOCK*@
				<div class="col-4">
					@if (!_teamsFetched)
					{
						<Loader Size="small" />
					}
					else
					{
						if (_teamsFetchingError)
						{
							<h4>Have found no teams.</h4>
							<p>Please, add some teams and try again.</p>
						}
						else
						{
							<h4>Teams in competition: @teamsInCompetition.Count</h4>
							<ul class="list-group list-group-flush">
								@foreach (var team in teamsInCompetition)
								{
									<li class="list-group-item">@team.Name</li>
								}
							</ul>
						}
					}
				</div>
				@*OPERATORS BLOCK*@
				<div class="col-4">
					<div class="row">
						@if (!_excercisesFetched)
						{
							<Loader Size="small"/>
						}
						else
						{
							if (_excercisesFetchingError || excercisesInCompetition.Count == 0)
							{
								<h4>Have found no excercises.</h4>
								<p>Please, add some excercises and try again.</p>
							}
							else
							{
								<h4>Excercises in competition: @excercisesInCompetition.Count</h4>
								<ul class="list-group list-group-flush">
									@foreach (var exercise in excercisesInCompetition)
									{
										<li class="list-group-item">@exercise.Name</li>
									}
								</ul>
							}
						}
					</div>

					<div class="row">
						@if (!_operatorsFetched)
						{
							<Loader Size="small" />
						}
						else
						{
							if (_operatorsFetchingError)
							{
								<h4>Have found no operators.</h4>
								<p>Please, add some teams and try again.</p>
							}
							else
							{
								<h4>Operators in competition: @operatorsInCompetition.Count</h4>
								<ul class="list-group list-group-flush">
									@foreach (var oper in operatorsInCompetition)
									{
										<li class="list-group-item">@oper.FirstName @oper.LastName</li>
									}
								</ul>
							}
						}
					</div>


					
				</div>

				<div class="col-4">
					<p>
						Date: @Competition.StartDateTime.ToString("dd.MM.yyy")
						<br />
						Day of week: @Competition.StartDateTime.DayOfWeek
						<br />
						Start at: @Competition.StartDateTime.ToString("t")
						<br />
						End at: @Competition.EndDateTime.ToString("t")
						<br />
						State: @Competition.State
						<br />
						Duration: @Competition.Duration.Hours hours @if (Competition.Duration.Minutes != 0)
						{
							@Competition.Duration.Minutes <span>minutes</span>
						}
						<br />
						Hashtag: <a href="https://twitter.com/search?q=@Competition.Hashtag&src=trend_click&vertical=trends" target="_blank">#@Competition.Hashtag</a>
						<br />
					</p>
				</div>

			</div>

		</div>

		<div class="card-footer">
			<div class="row">

				<div class="col-4 text-start">
					<button class="btn btn-primary" @onclick="ButtonSetHandler">Set this event</button>
				</div>

				<div class="col-4 text-start">
					<button class="btn btn-primary" @onclick="ButtonSetHandler">Set this event</button>
				</div>

				<div class="col-4 text-end">
					<button class="btn btn-danger" @onclick="ButtonSetHandler">Disable this event</button>
					<button class="btn btn-danger" @onclick="ButtonSetHandler">Delete this event</button>
				</div>

			</div>
		</div>

	</div>
</div>

@code {
	[Parameter]
	public CompetitionDT Competition { get; set; }

	bool _teamsFetched;
	bool _teamsFetchingError;
	List<TeamDT> teamsInCompetition = new();

	bool _operatorsFetched;
	bool _operatorsFetchingError;
	List<UserDT> operatorsInCompetition = new();

	bool _excercisesFetched;
	bool _excercisesFetchingError;
	List<ExerciseDT> excercisesInCompetition = new();

	string TimeString = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await FetchTeamsInCompetitionAsync();
		await FetchOperatorsInCompetitionAsync();
		await FetchExcercisesInCompetitionAsync();
	}

	protected override void OnParametersSet()
	{
		TimeString = FormatTimeString();
	}

	private async Task FetchTeamsInCompetitionAsync()
	{
		_teamsFetched = false;
		try
		{
			teamsInCompetition = await CompetitionService.GetAllCompetitionTeamsAsync((int)Competition?.Id);
			_teamsFetched = true;
		}
		catch
		{
			_teamsFetchingError = true;
			_teamsFetched = true;
		}
	}

	private async Task FetchOperatorsInCompetitionAsync()
	{
		_operatorsFetched = false;
		try
		{
			operatorsInCompetition = await CompetitionService.GetAllCompetitionOperatorsAsync((int)Competition?.Id);
			_operatorsFetched = true;
		}
		catch
		{
			_operatorsFetchingError = true;
			_operatorsFetched = true;
		}
	}

	private async Task FetchExcercisesInCompetitionAsync()
	{
		_excercisesFetched = false;
		try
		{
			excercisesInCompetition = await CompetitionService.GetAllCompetitionExercisesAsync((int)Competition?.Id);
			_excercisesFetched = true;
			Console.WriteLine(excercisesInCompetition[0].Name + Competition.Name);
		}
		catch
		{
			Console.WriteLine(_excercisesFetchingError + Competition.Name);
			_excercisesFetchingError = true;
			_excercisesFetched = true;
		}
	}

	private string FormatTimeString()
	{
		TimeSpan timeSpan = new();
		string timeString = string.Empty;

		if (Competition.StateId == CompetitionStates.InProgress)
		{

			if (Competition.EndDateTime <= DateTime.Now)
			{
				timeString = "This competition will ended soon";
				return timeString;
			}
			timeSpan = Competition.EndDateTime - DateTime.Now;
			timeString = "The competition ends in ";
		}
		else if (Competition.StateId == CompetitionStates.Planned)
		{
			if (Competition.StartDateTime <= DateTime.Now)
			{
				timeString = "This competition will started soon";
				return timeString;
			}
			timeSpan = Competition.StartDateTime - DateTime.Now;
			timeString = "Till start remains ";
		}

		if (timeSpan.Days != 0)
		{
			if (timeSpan.Days == 1)
				timeString += $" 1 day";
			else
				timeString += $" {timeSpan.Days} days";
		}

		if (timeSpan.Hours != 0)
		{
			if (timeSpan.Hours == 1)
				timeString += $" 1 hour";
			else
				timeString += $" {timeSpan.Hours} hours";
		}

		if (timeSpan.Minutes != 0)
		{
			if (timeSpan.Minutes == 1)
				timeString += $" 1 minute";
			else
				timeString += $" {timeSpan.Minutes} minutes";
		}

		return timeString;
	}

	private void ButtonSetHandler()
	{
		NavigationManager
				.NavigateTo($"/competition/set/{Competition.Id}");
	}
}
